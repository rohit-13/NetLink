// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name Networking
import Combine
import Foundation
@_exported import Networking
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers public class NetworkService {
  public static func get<T>(urlString: Swift.String, queryItems: [Swift.String : Swift.String]? = nil, headers: [Swift.String : Swift.String]? = nil) -> Combine.Future<T, any Swift.Error> where T : Swift.Decodable, T : Swift.Encodable
  public static func post<T>(urlString: Swift.String, queryItems: [Swift.String : Swift.String]? = nil, headers: [Swift.String : Swift.String]? = nil, payload: [Swift.String : Any]) -> Combine.Future<T, any Swift.Error> where T : Swift.Decodable, T : Swift.Encodable
  @objc deinit
}
public enum NetworkError : Swift.Error {
  case invalidURL
  case invalidRequest
  case invalidSession
  case invalidResponse
  public static func == (a: Networking.NetworkError, b: Networking.NetworkError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct EmptyModel : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Combine.Publisher {
  public func clubIntoResult() -> Combine.AnyPublisher<Swift.Result<Self.Output, Self.Failure>, Swift.Never>
}
extension Networking.NetworkError : Swift.Equatable {}
extension Networking.NetworkError : Swift.Hashable {}
